@using GDLevels.Data.Adapters.Interfaces
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc
@if (DisplayHeader)
{
    <h3 class="pl-4 text-center">Список уровней</h3>
}
@code {
    [Parameter]
    public ILevelsDataAdapter LevelsAdapter { get; set; }

    [Parameter]
    public string PageName { get; set; } = "/";
    public int LastPage => LevelsAdapter.LevelsCount / LevelsPerPage + ((LevelsAdapter.LevelsCount % LevelsPerPage == 0) ? 0 : 1);
    [Parameter]
    public int CurrentPage
    {
        get => _currentPage;
        set
        {
            if (value < 1)
                _currentPage = 1;
            else if (value > LastPage)
                _currentPage = LastPage;
            else
                _currentPage = value;
        }
    }

    
    [Parameter]
    public bool DisplayHeader { get; set; } = false;

    [Parameter]
    public int LevelsPerPage { get; set; } = 15;
    [Parameter]
    public bool CanDeleteLevels { get; set; } = false;

    private int _currentPage = 1;
}
@if (LastPage > 0)
{
    <table class="m-auto w-75 text-left table-active table-bordered table-hover table-striped">
        <thead>
        <tr>
            <td class="p-1 w-50">ID уровня</td>
            <td class="p-1 w-50">Дата реквеста</td>
            @if (CanDeleteLevels)
            {
                <td class="p-1 text-danger">Удаление</td>
            }
        </tr>
        </thead>
        <tbody>
        @foreach (var level in LevelsAdapter.GetLevelsOnPage(CurrentPage, LevelsPerPage))
        {
            <tr>
                <td class="p-1">@level.LevelId.ToString()</td>
                <td class="p-1">@(DateTime.UnixEpoch.AddSeconds(level.RequestTime).ToString())</td>
                @if (CanDeleteLevels)
                {
                    <td class="p-1 text-danger text-center"><a class="text-danger" href="/Delete?levelId=@level.LevelId&redirect=@PageName">X</a></td>
                }
            </tr>
        }
        </tbody>
    </table>
    <p class="pages-button-container mt-2 text-center">
        @if (LastPage > 1)
        {
            @if (CurrentPage > 3)
            {
                <a class="m-2" href="1">1</a>
            }
            @if (CurrentPage > 4)
            {
                <b class="m-2">...</b>
            }
            @if (CurrentPage > 2)
            {
                <a class="m-2" href="@(CurrentPage - 2)">@((CurrentPage - 2).ToString())</a>
            }
            @if (CurrentPage > 1)
            {
                <a class="m-2" href="@(CurrentPage - 1)">@((CurrentPage - 1).ToString())</a>
            }
            <b class="m-2">@CurrentPage.ToString()</b>
            @if (CurrentPage < LastPage)
            {
                <a class="m-2" href="@(CurrentPage + 1)">@((CurrentPage + 1).ToString())</a>
            }
            @if (CurrentPage < LastPage - 1)
            {
                <a class="m-2" href="@(CurrentPage + 2)">@((CurrentPage + 2).ToString())</a>
            }
            @if (CurrentPage < LastPage - 3)
            {
                <b class="m-2">...</b>
            }
            @if (CurrentPage < LastPage - 2)
            {
                <a class="m-2" href="@LastPage">@(LastPage.ToString())</a>
            }
        }
    </p>
}
